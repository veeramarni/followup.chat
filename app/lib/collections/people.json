[
  {
    "_id": "55826a39a982d103008c4b20",
    "name": "Christopher Chedeau",
    "bio": "Frenchy Front-end Engineer at Facebook. Working on React.",
    "github": "vjeux",
    "isOrganiser": true,
    "isSpeaker": true,
    "picture": "./img/speakers/christopher-chedeau.jpg",
    "twitter": "vjeux",
    "talks": [
      {
        "key": "keynote",
        "duration": 1800000,
        "endTime": "2015-07-02T08:30:00.000Z",
        "startTime": "2015-07-02T08:00:00.000Z",
        "type": "talk",
        "title": "Keynote",
        "description": "<p>coming soon</p>\n",
        "speakers": [
          "55826a39a982d103008c4b20"
        ],
        "_id": "55826a3ba982d103008c4b4c",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b21",
    "name": "Michael Chan",
    "bio": "Michael Chan is no special flower. He loves ramen and helping JS n00bs learn React. Michael is a developer at Planning Center Online where he gleefully creates shared libraries and components for Planning Center's six applications. Last spring he built the company's first React application, Services Live 3, and continues to develop practices and patterns for writing React.js on Rails.",
    "github": "chantastic",
    "isSpeaker": true,
    "picture": "./img/speakers/michael-chan.jpg",
    "twitter": "chant",
    "talks": [
      {
        "key": "inline-styles-themes-media-queries-contexts-and-when-its-best-to-use-css",
        "duration": 1800000,
        "endTime": "2015-07-02T09:00:00.000Z",
        "startTime": "2015-07-02T08:30:00.000Z",
        "type": "talk",
        "title": "Inline Styles: themes, media queries, contexts, and when it's best to use CSS",
        "description": "<p>React allows you to write styles inline and bypass a host of CSS shortcomings. Scope, dependency management, dead code elimination, these problems go away when adding your styles directly to components. But it&#39;s not all rainbows and unicorns. Things like theming and media queries become much more difficult when all your styles live directly on components. In this talk, we&#39;ll look at how to solve these problems with contexts and plain old JavaScript. We&#39;ll also look at the role of container-components and when it&#39;s better to &quot;just use CSS.&quot;</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b21"
        ],
        "_id": "55826a3ba982d103008c4b4d",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b22",
    "name": "Elie Rotenberg",
    "bio": "PhD in Computer Science, CTO and Software Architect at Webedia Gaming (editor of jeuxvideo.com and millenium.org), Elie Rotenberg is a specialist in designing and deploying real-time, large-scale web applications, such as Chats, Web TVs, up to tens of thousands of concurrent users.",
    "github": "elierotenberg",
    "isSpeaker": true,
    "picture": "./img/speakers/elie-rotenberg.jpg",
    "twitter": "elier",
    "talks": [
      {
        "key": "flux-over-the-wire",
        "duration": 3600000,
        "endTime": "2015-07-02T10:00:00.000Z",
        "startTime": "2015-07-02T09:30:00.000Z",
        "type": "talk",
        "title": "Flux over the Wire",
        "description": "<p>Flux is most often used to implement shared state within a single window. But done properly, this architecture can be used to implement real-time, multi-user shared state between many users of the same web applications. Using HTTP requests to dispatch stores, and Websocket to broadcast updates, Flux over the Wire has the potential to trivialize several hard problems. While the idea of using Websockets to back Flux is rather straightforward, doing it in a way that scales up to tens of thousands of concurrent viewers can prove challenging. In addition, Flux over the Wire offers an interface which considerably eases server-side rendering, as it completely abstracts data fetching and data syncing from the React views that tap into its stores and dispatch its actions.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b22"
        ],
        "_id": "55826a3ba982d103008c4b4f",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b23",
    "name": "Spencer Ahrens",
    "bio": "Spencer has worked on a variety of projects at Facebook over the last several years including Android, iOS, and mobile web product teams, News Feed API, and Search Infrastructure. He's currently working on React Native.",
    "github": "sahrens",
    "isSpeaker": true,
    "picture": "./img/speakers/spencer-ahrens.jpg",
    "twitter": "",
    "talks": [
      {
        "key": "react-native-building-fluid-user-experiences",
        "duration": 0,
        "endTime": "2015-07-02T10:30:00.000Z",
        "startTime": "2015-07-02T10:00:00.000Z",
        "type": "talk",
        "title": "React Native: Building Fluid User Experiences",
        "description": "<p>React Native&#39;s architecture has opened up many possibilities for re-inventing the clunkier aspects of UX construction on traditional platforms, making it easier and faster to build world-class experiences. This talk will walk through building an advanced gestural UI leveraging the unique power of the React Native layout and animation systems to build a complex and fluid experience.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b23"
        ],
        "_id": "55826a3ba982d103008c4b50",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b24",
    "name": "Dan Schafer",
    "bio": "Dan Schafer is a co-creator of GraphQL, and designed the data model backing the original GraphQL API, which powered Facebook's news feed. He added GraphQL's support for writes, and has helped maintain Facebook's GraphQL engine and APIs for almost three years.",
    "github": "dschafer",
    "isSpeaker": true,
    "picture": "./img/speakers/dlschafer.jpg",
    "twitter": "dlsch",
    "talks": [
      {
        "key": "creating-a-graphql-server",
        "duration": 1800000,
        "endTime": "2015-07-03T13:00:00.000Z",
        "startTime": "2015-07-03T12:30:00.000Z",
        "type": "talk",
        "title": "Creating a GraphQL Server",
        "description": "<p>In this talk, we&#39;ll take a deeper dive into putting GraphQL to work. How can we build a GraphQL API to work with an existing REST API or server-side data model? What are best practices when building a GraphQL API, and how do they differ from traditional REST best practices? How does Facebook use GraphQL? Most importantly, what does a complete and coherent GraphQL API looks like, and how can we get started building one?</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b24",
          "55826a3aa982d103008c4b25"
        ],
        "_id": "55826a3ba982d103008c4b63",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b25",
    "name": "Nick Schrock",
    "bio": "Nick Schrock is a co-creator of GraphQL, and wrote the original version of Facebook's GraphQL engine. An original member of Facebook's Product Infrastructure team, Nick helped create the abstractions that power Facebooks's PHP data model, and built out the Facebook's iOS and Android tooling around GraphQL.",
    "github": "schrockn",
    "isSpeaker": true,
    "picture": "./img/speakers/schrockn.jpg",
    "twitter": "schrockn",
    "talks": [
      {
        "key": "creating-a-graphql-server",
        "duration": 1800000,
        "endTime": "2015-07-03T13:00:00.000Z",
        "startTime": "2015-07-03T12:30:00.000Z",
        "type": "talk",
        "title": "Creating a GraphQL Server",
        "description": "<p>In this talk, we&#39;ll take a deeper dive into putting GraphQL to work. How can we build a GraphQL API to work with an existing REST API or server-side data model? What are best practices when building a GraphQL API, and how do they differ from traditional REST best practices? How does Facebook use GraphQL? Most importantly, what does a complete and coherent GraphQL API looks like, and how can we get started building one?</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b24",
          "55826a3aa982d103008c4b25"
        ],
        "_id": "55826a3ba982d103008c4b63",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b26",
    "name": "Ryan Florence",
    "bio": "JavaScript Consultant/Trainer, co-author of React Router.",
    "github": "ryanflorence",
    "isSpeaker": true,
    "picture": "./img/speakers/ryan-florence.jpg",
    "twitter": "ryanf",
    "talks": [
      {
        "key": "help-i-cant-hear-my-website",
        "duration": 1800000,
        "endTime": "2015-07-02T13:00:00.000Z",
        "startTime": "2015-07-02T12:30:00.000Z",
        "type": "talk",
        "title": "Help! I Can't Hear My Website!",
        "description": "<p>Have you ever used an assistive device like a screen reader on your website? There&#39;s a good chance its about as usable as opening it in IE 5.5. Its not about &quot;alt tags&quot; anymore. Put on your empathy hat, or have one forced on you, while I talk about what its like for people with vision impairment.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b26"
        ],
        "_id": "55826a3ba982d103008c4b53",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b27",
    "name": "Dan Abramov",
    "bio": "Dan is young developer who began writing JavaScript full-time two years ago.\n    Unsatisifed with Backboneâ€™s shortcomings, Dan found React and Flux to be a very\n    solid foundation for building composite and stateful user interfaces at Stampsy.\n    Dan authored and contributed to several popular React components and libraries.\n    Before getting into JavaScript, he used to write C# for Windows, Linux and iOS.",
    "github": "gaearon",
    "isSpeaker": true,
    "picture": "./img/speakers/dan-abramov.jpg",
    "twitter": "dan_abramov",
    "talks": [
      {
        "key": "live-react-hot-reloading-with-time-travel",
        "duration": 1800000,
        "endTime": "2015-07-02T14:00:00.000Z",
        "startTime": "2015-07-02T13:30:00.000Z",
        "type": "talk",
        "title": "Live React: Hot Reloading with Time Travel",
        "description": "<p>Reactâ€™s unique strength is bringing to JavaScript development some of the\n    benefits previously exclusive to more radically functional languages such as\n    Elm and ClojureScript, without forcing you to completely eschew local state\n    or rewrite code with exclusively immutable data structures.\n    In this talk, Dan will demonstrate how React can be used together with\n    Webpack Hot Module Replacement to create a live editing environment with\n    time travel that supercharges your debugging experience and transforms the\n    way you work on real apps every day.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b27"
        ],
        "_id": "55826a3ba982d103008c4b55",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b28",
    "name": "Joseph Savona",
    "bio": "Joseph Savona is a developer at Facebook working on Relay and GraphQL.",
    "github": "josephsavona",
    "isSpeaker": true,
    "picture": "./img/speakers/joseph-savona.jpg",
    "twitter": "en_js",
    "talks": [
      {
        "key": "relay-an-application-framework-for-react",
        "duration": 3600000,
        "endTime": "2015-07-02T14:30:00.000Z",
        "startTime": "2015-07-02T14:00:00.000Z",
        "type": "talk",
        "title": "Relay: An Application Framework For React",
        "description": "<p>Relay is a new framework from Facebook that enables declarative data fetching &amp; updates for React applications. Relay components use GraphQL to specify their data requirements, and compose together to form truly modular applications. This talk will explore the problems Relay solves, its architecture and the query lifecycle, and how can you use Relay to build more scalable apps. Weâ€™ll also see examples of how Relay powers applications as complex as the Facebook News Feed.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b28"
        ],
        "_id": "55826a3ba982d103008c4b56",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3aa982d103008c4b29",
    "name": "Mikhail Davydov",
    "bio": "Mikhail is a full stack JavaScript developer at Productive Mobile and currently working on\n    project which transforms enterprise web applications into mobile. Before that time\n    he worked for Yandex and taught about 200 developers to write awesome JavaScript apps.\n    He has many talks and lectures about JavaScript and related technologies.\n    On leisure time he takes pictures and tries to marry technology and photography in his\n    \"2layer photo-project\".",
    "github": "azproduction",
    "isSpeaker": true,
    "picture": "./img/speakers/mikhail-davydov.jpg",
    "twitter": "azproduction",
    "talks": [
      {
        "key": "back-to-text-ui",
        "duration": 1800000,
        "endTime": "2015-07-02T15:30:00.000Z",
        "startTime": "2015-07-02T15:00:00.000Z",
        "type": "talk",
        "title": "Back to Text UI",
        "description": "<p>Paradoxically that today it is easier to create GUI than Text UI.\n    Developer has an arsenal of different GUI libraries and layout engines.\n    When one decides to write Terminal Text UI app he faces obstacles\n    of Text UI DSL Library, imperative layouts, constantly increasing\n    complexity and underdeveloped approaches.\n    In this talk I will show you how to ask browser layout engine for help,\n    how to avoid slavery of DSL and build declarative Text UI using only\n    web-technologies like HTML, JS, CSS and React.</p>\n",
        "speakers": [
          "55826a3aa982d103008c4b29"
        ],
        "_id": "55826a3ba982d103008c4b58",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2a",
    "name": "Sebastian McKenzie",
    "bio": "Sebastian McKenzie is a JavaScript enthusiast based in Sydney, Australia.\n    He's extremely passionate about open source as well as web standards and is\n    always looking to push the boundaries of what is possible.\n    Sebastian is also the creator of the popular Babel compiler that's used by\n    many React developers to bring their JSX and ES6 to life.",
    "github": "sebmck",
    "isSpeaker": true,
    "picture": "./img/speakers/sebastian-mcKenzie.png",
    "twitter": "sebmck",
    "talks": [
      {
        "key": "improving-your-workflow-with-code-transformation",
        "duration": 1800000,
        "endTime": "2015-07-03T08:30:00.000Z",
        "startTime": "2015-07-03T08:00:00.000Z",
        "type": "talk",
        "title": "Improving Your Workflow With Code Transformation",
        "description": "<p>Most React developers already use a build pipeline to transform their JSX\n    into vanilla JavaScript. This is usually under-utilised only doing basic\n    transformations such as concatenation, minification and linting.\n    In this talk, Sebastian will go over how this already existing infrastructure\n    can be further utilised to perform even more significant code transformations\n    such as transpilation, optimisation, profiling and more, reducing bugs,\n    making your code faster and you as a developer more productive and happy.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2a"
        ],
        "_id": "55826a3ba982d103008c4b5c",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2b",
    "name": "Cheng Lou",
    "bio": "I started making manual animation in Flash, and never really left in spirit.",
    "github": "chenglou",
    "isSpeaker": true,
    "picture": "./img/speakers/cheng-lou.jpg",
    "twitter": "_chenglou",
    "talks": [
      {
        "key": "the-state-of-animation-in-react",
        "duration": 1800000,
        "endTime": "2015-07-03T09:00:00.000Z",
        "startTime": "2015-07-03T08:30:00.000Z",
        "type": "talk",
        "title": "The State of Animation in React",
        "description": "<p>A talk on the past, the present and the future of animation, and the place\n    React can potentially take in this. I will be focusing on a few experiments\n    on animation I&#39;ve done, specifically: react-tween-state, react-state-stream\n    and some unreleased transition-group related thoughts and work.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2b"
        ],
        "_id": "55826a3ba982d103008c4b5d",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2c",
    "name": "Kevin Robinson",
    "bio": "Software Engineer at Twitter.",
    "github": "kevinrobinson",
    "isSpeaker": true,
    "picture": "./img/speakers/kevin-robinson.png",
    "twitter": "krob",
    "talks": [
      {
        "key": "simplifying-the-data-layer",
        "duration": 1800000,
        "endTime": "2015-07-03T10:00:00.000Z",
        "startTime": "2015-07-03T09:30:00.000Z",
        "type": "talk",
        "title": "Simplifying the data layer",
        "description": "<p>At Twitter, teams have starting adopting React because itâ€™s enabled UI engineers to forget about time when writing rendering code. And we&#39;ve started exploring similar simplifications in the data layer, embracing the UIâ€™s role as part of a distributed system. First, we&#39;ll share how user experience choices are a primary influence on how we design the data layer, especially for teams developing new products with full-stack capabilities. Working with data from multiple backend services has powerful benefits, and shapes the problem space for UI engineering. Next, we&#39;ll look at how React and Flux approaches can help in our problem scenarios. Yet even after the advances in Reactâ€™s component model, the data layer is still an important source of complexity as an app grows and changes over time. Finally, we&#39;ll look at new approaches weâ€™ve been exploring, and how designs like decoupling &#39;recording facts&#39; from &#39;computing views of those facts&#39; have influenced UI engineering. These designs nudge teams towards simplicity when creating impactful user-facing improvements like real-time updates, optimistic commits, and graceful handling of network outages.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2c"
        ],
        "_id": "55826a3ba982d103008c4b5f",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2d",
    "name": "Jed Watson",
    "bio": "Partner at @thethinkmill, Javascript / node.js developer, entrepreneur, creator of @KeystoneJS and @TouchstoneJS.",
    "github": "JedWatson",
    "isSpeaker": true,
    "picture": "./img/speakers/jed-watson.jpg",
    "twitter": "JedWatson",
    "talks": [
      {
        "key": "going-mobile-with-react",
        "duration": 1800000,
        "endTime": "2015-07-03T02:30:00.000Z",
        "startTime": "2015-07-03T02:00:00.000Z",
        "type": "talk",
        "title": "Going Mobile with React",
        "description": "<p>React.js is changing the way developers think about mobile app development, especially with the recent announcement of React Native. However, in many ways hybrid (web + mobile) app development is here to stay for a large number of mobile apps.</p>\n<p>We believe the web is a powerful platform for building awesome mobile apps with the technology you know. At Thinkmill in Sydney, we&#39;ve experienced the power of using ReactJS for mobile apps built on web technology, and developed a framework we call TouchstoneJS to share this capability with developers around the world.</p>\n<p>In this talk I&#39;ll share what we&#39;ve learned and how we&#39;ve approached the unique challenges of mobile web apps. You&#39;ll also hear about TouchstoneJS, React Native, and how we think they could converge in the future.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2d"
        ],
        "_id": "55826a3ba982d103008c4b60",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2e",
    "name": "Michael Jackson",
    "bio": "Thriller. Previously @ycombinator S2013, @twitter and @path.",
    "github": "mjackson",
    "isSpeaker": true,
    "picture": "./img/speakers/michael-jackson.jpg",
    "twitter": "mjack",
    "talks": [
      {
        "key": "react-router",
        "duration": 1800000,
        "endTime": "2015-07-03T12:30:00.000Z",
        "startTime": "2015-07-03T12:00:00.000Z",
        "type": "talk",
        "title": "React Router",
        "description": "<p>Since May 2014 over 100 people have contributed code to React Router and many, many more have filed issues, given talks, and used the router in both server and client environments. It has been mine and Ryan&#39;s privilege to work with and learn from these wonderful people and to guide the direction of a library that we hope will help us all build amazing products and tools with React over the next few years.</p>\n<p>This year we are introducing support for React Native and we are working closely with the Relay team to ensure the router meets the needs of React developers everywhere React runs. More importantly though, we are focused on bringing great experiences to consumers of applications built using React Router. In this talk, we will discuss how your users can benefit from the many tools the router provides including server-side rendering, real URLs on native devices, and much, much more.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2e"
        ],
        "_id": "55826a3ba982d103008c4b62",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b2f",
    "name": "Michael Ridgway",
    "bio": "Mike is software engineer at Yahoo working on node.js and React/Flux\n    frontends that power high-traffic web applications.",
    "github": "mridgway",
    "isSpeaker": true,
    "picture": "./img/speakers/michael-ridgway.jpg",
    "twitter": "TheRidgway",
    "talks": [
      {
        "key": "isomorphic-flux",
        "duration": 1800000,
        "endTime": "2015-07-03T14:00:00.000Z",
        "startTime": "2015-07-03T13:30:00.000Z",
        "type": "talk",
        "title": "Isomorphic Flux",
        "description": "<p>Flux provides a good framework for building rich client applications, but\n    did you know you can reuse the flux architecture for server rendering? In\n    this talk, I&#39;ll walk you through an isomorphic Flux architecture to give\n    you the holy grail of frontend development. With this architecture you&#39;ll be\n    able to reuse all of your application code on the server and client without\n    worrying about server-side concurrency issues that you may see with stock\n    Flux.\n    Once the concepts have been explained, I will introduce the open source\n    libraries that we have open sourced and are powering many of Yahoo&#39;s\n    high-traffic web applications.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b2f"
        ],
        "_id": "55826a3ba982d103008c4b65",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b30",
    "name": "Aria Buckles",
    "bio": "Aria has been building interactive educational experiences with React\n    at Khan Academy since September 2013, and maintains one of the oldest\n    large React codebases outside of Facebook.",
    "github": "ariabuckles",
    "isSpeaker": true,
    "picture": "./img/speakers/aria-buckles.jpg",
    "twitter": "ariabuckles",
    "talks": [
      {
        "key": "building-submarines-that-dont-leak",
        "duration": 3600000,
        "endTime": "2015-07-03T15:00:00.000Z",
        "startTime": "2015-07-03T14:00:00.000Z",
        "type": "talk",
        "title": "Building submarines that don't leak",
        "description": "<p>React provides us with a lot of tools for building components, but\n    isn&#39;t prescriptive about how we use those. Objects can have props,\n    state, and instance fields. When is it best to use each?\n    We&#39;ve heard a lot about pure components, but how do we make pure\n    components when we have to deal with the realities of a stateful\n    world? How do we make more complex components whose props actually\n    represent them?\n    We&#39;ll cover how we&#39;ve answered these questions at Khan Academy,\n    including techniques and patterns to make dealing with large pure\n    components simpler, as well as current open questions.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b30"
        ],
        "_id": "55826a3ba982d103008c4b66",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b31",
    "name": "Ben Gotow",
    "bio": "Incurable builder, front-end product engineer at Nilas. Formerly principal of @Foundry376, developer of more than 20 iOS apps and the @SparkInspector. Studied HCI at Carnegie Mellon and CS at Vanderbilt University.",
    "github": "bengotow",
    "isSpeaker": true,
    "picture": "./img/speakers/ben-gotow.jpg",
    "twitter": "bengotow",
    "talks": [
      {
        "key": "how-react-and-flux-turn-applications-into-extensible-platforms",
        "duration": 1800000,
        "endTime": "2015-07-03T15:30:00.000Z",
        "startTime": "2015-07-03T15:00:00.000Z",
        "type": "talk",
        "title": "How React & Flux Turn Applications Into Extensible Platforms",
        "description": "<p>Chrome is great, but 3rd party extensions make it better. The iPhone\n    is great, but apps make it better. You React-app may be great, but\n    imagine if you could safely and robustly allow 3rd party extensions to\n    enhance it.\n    We&#39;ll talk about specific features of React &amp; Flux, React CSS,\n    programming design patterns, and custom libraries, which can turn a\n    static application into a dynamic platform that an ecosystem of\n    developers can build on top of.\n    We&#39;ve built a highly-extensible desktop email client with React &amp; Flux\n    on Atom Shell, and we&#39;ll also show concrete examples of where these\n    tools enabled a 3rd party ecosystem of email plugins.\n    Our goal is for you to take away how to use React to be more than just\n    great application developers, but now great platform developers as\n    well.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b31",
          "55826a3ba982d103008c4b32"
        ],
        "_id": "55826a3ba982d103008c4b68",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b32",
    "name": "Evan Morikawa",
    "bio": "Currently a frontend application engineer at Nilas. Before building email clients, Evan founded & customer-funded Proximate, was a dev-in-residence at Techstars, and graduated Olin College of Engineering with a CS degree.",
    "github": "emorikawa",
    "isSpeaker": true,
    "picture": "./img/speakers/evan-morikawa.jpg",
    "twitter": "e0m",
    "talks": [
      {
        "key": "how-react-and-flux-turn-applications-into-extensible-platforms",
        "duration": 1800000,
        "endTime": "2015-07-03T15:30:00.000Z",
        "startTime": "2015-07-03T15:00:00.000Z",
        "type": "talk",
        "title": "How React & Flux Turn Applications Into Extensible Platforms",
        "description": "<p>Chrome is great, but 3rd party extensions make it better. The iPhone\n    is great, but apps make it better. You React-app may be great, but\n    imagine if you could safely and robustly allow 3rd party extensions to\n    enhance it.\n    We&#39;ll talk about specific features of React &amp; Flux, React CSS,\n    programming design patterns, and custom libraries, which can turn a\n    static application into a dynamic platform that an ecosystem of\n    developers can build on top of.\n    We&#39;ve built a highly-extensible desktop email client with React &amp; Flux\n    on Atom Shell, and we&#39;ll also show concrete examples of where these\n    tools enabled a 3rd party ecosystem of email plugins.\n    Our goal is for you to take away how to use React to be more than just\n    great application developers, but now great platform developers as\n    well.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b31",
          "55826a3ba982d103008c4b32"
        ],
        "_id": "55826a3ba982d103008c4b68",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b33",
    "name": "Sebastian Markbage",
    "bio": "React Core Maintainer at Facebook",
    "github": "sebmarkbage",
    "isSpeaker": true,
    "picture": "./img/speakers/SebastianProfile.jpg",
    "twitter": "sebmarkbage",
    "talks": [
      {
        "key": "dom-as-a-second-class-citizen",
        "duration": 1800000,
        "endTime": "2015-07-02T18:00:00.000Z",
        "startTime": "2015-07-02T17:30:00.000Z",
        "type": "talk",
        "title": "DOM as a Second-class Citizen",
        "description": "<p>React has always been about the Virtual DOM. A nice way to render HTML (and some of SVG and maybe some Web Components). Although there&#39;s also react-art, react-three, react-canvas, react-curses... Oh, and react-native! Even if you bottom out at HTML, most of what React does really well is rendering to OTHER React components. Meanwhile most projects still try to retrofit our needs into HTML and CSS primitives. I&#39;ll talk about why the DOM is flawed and how it is becoming a second-class citizen in the land of React apps.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b33"
        ],
        "_id": "55826a3ba982d103008c4b59",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b34",
    "name": "Lee Byron",
    "bio": "Making things at Facebook since 2008: React, GraphQL, Immutable.js, Mobile, JavaScript.",
    "github": "leebyron",
    "isSpeaker": true,
    "picture": "./img/speakers/lee-byron.jpg",
    "twitter": "leeb",
    "talks": [
      {
        "key": "exploring-graphql",
        "duration": 1800000,
        "endTime": "2015-07-02T12:30:00.000Z",
        "startTime": "2015-07-02T12:00:00.000Z",
        "type": "talk",
        "title": "Exploring GraphQL",
        "description": "<p>At React.js Conf last January, we introduced the idea of GraphQL: a data fetching language that allows clients to declaratively describe their data requirements. Let&#39;s explore more of GraphQL, it&#39;s core principles, how it works, and what makes it a powerful tool.</p>\n",
        "speakers": [
          "55826a3ba982d103008c4b34"
        ],
        "_id": "55826a3ba982d103008c4b52",
        "feedback": {}
      }
    ]
  },
  {
    "_id": "55826a3ba982d103008c4b36",
    "name": "Katiuska Gamero",
    "bio": "Chemical engineer turned web dev in ruby/rails/js/html5, foodie and what have you.",
    "github": "katcita",
    "isOrganiser": true,
    "picture": "./img/organisers/katy.jpg",
    "twitter": "katy_gca",
    "talks": [],
    "isSpeaker": false
  },
  {
    "_id": "55826a3ba982d103008c4b35",
    "name": "Patrick Aljord",
    "bio": "Hacker, entrepreneur, cheese eater. @ngeurope and @reacteurope organizer.",
    "github": "patcito",
    "isOrganiser": true,
    "picture": "./img/organisers/pat.jpg",
    "twitter": "patcito",
    "talks": [],
    "isSpeaker": false
  },
  {
    "_id": "55826a3ba982d103008c4b37",
    "name": "Chris Ramon",
    "bio": "Runner, coder, world traveler and open source software enthusiast, lately hacking on Go, Angular and React.",
    "github": "chris-ramon",
    "isOrganiser": true,
    "picture": "./img/organisers/cramon.jpg",
    "twitter": "cramonn",
    "talks": [],
    "isSpeaker": false
  }
]